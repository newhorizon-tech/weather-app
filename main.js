(()=>{"use strict";var t={192:(t,e,n)=>{n.d(e,{Z:()=>c});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"body{margin:0;background-color:#673ab7;background-size:cover}#input-section{margin:2%}button{color:#fff;border:none}#city-btn{background-color:#e9062f;padding:8px;margin:5px}#toggle-btn{padding:3px;color:#000}input{padding:8px}#icon{width:50px;height:50px}.card{display:none;flex-direction:column;align-items:center;background:#e9062f;margin:10% auto;width:250px;height:300px;padding:10px 15px;color:#fff;font-size:100%;line-height:18px;font-weight:bold;box-sizing:border-box;text-align:center;transition:all .15s ease-out;box-shadow:0 5px 5px rgba(0,0,0,.3);overflow:hidden}#desc{text-transform:capitalize}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAKA,KACE,QAAA,CACA,wBAJS,CAKT,qBAAA,CAGF,eACE,SAAA,CAGF,OACE,UAAA,CACA,WAAA,CAGF,UACE,wBArBY,CAsBZ,WAAA,CACA,UAAA,CAGF,YACE,WAAA,CACA,UAAA,CAGF,MACE,WAAA,CAGF,MACE,UAAA,CACA,WAAA,CAGF,MACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,kBA5CY,CA6CZ,eAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CACA,UAAA,CACA,cAAA,CACA,gBAAA,CACA,gBAAA,CAEA,qBAAA,CACA,iBAAA,CACA,4BAAA,CACA,mCAAA,CACA,eAAA,CAGF,MACE,yBAAA",sourcesContent:["$bright-pink: rgba(233, 6, 47, 1);\n$light-orange: rgba(251, 133, 59, 1);\n$translucent-gray: rgb(73, 73, 73, 0.8);\n$purplish: rgba(103, 58, 183, 1);\n\nbody {\n  margin: 0;\n  background-color: $purplish;\n  background-size: cover;\n}\n\n#input-section {\n  margin: 2%;\n}\n\nbutton {\n  color: white;\n  border: none;\n}\n\n#city-btn {\n  background-color: $bright-pink;\n  padding: 8px;\n  margin: 5px;\n}\n\n#toggle-btn {\n  padding: 3px;\n  color: black;\n}\n\ninput {\n  padding: 8px;\n}\n\n#icon {\n  width: 50px;\n  height: 50px;\n}\n\n.card {\n  display: none;\n  flex-direction: column;\n  align-items: center;\n  background: $bright-pink;\n  margin: 10% auto;\n  width: 250px;\n  height: 300px;\n  padding: 10px 15px;\n  color: white;\n  font-size: 100%;\n  line-height: 18px;\n  font-weight: bold;\n  // position: relative;\n  box-sizing: border-box;\n  text-align: center;\n  transition: all 0.15s ease-out;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);\n  overflow: hidden;\n}\n\n#desc {\n  text-transform: capitalize;\n}\n"],sourceRoot:""}]);const c=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var s=[].concat(t[c]);r&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},15:t=>{function e(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n=e(t,4),r=n[1],o=n[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(a," */"),s=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[r].concat(s).concat([c]).join("\n")}return[r].join("\n")}},379:(t,e,n)=>{var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function c(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],u=n[s]||0,A="".concat(s," ").concat(u);n[s]=u+1;var d=c(A),l={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(l)):a.push({identifier:A,updater:g(l,e),references:1}),r.push(A)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var A,d=(A=[],function(t,e){return A[t]=e,A.filter(Boolean).join("\n")});function l(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=d(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function p(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var f=null,m=0;function g(t,e){var n,r,o;if(e.singleton){var i=m++;n=f||(f=u(e)),r=l.bind(null,n,i,!1),o=l.bind(null,n,i,!0)}else n=u(e),r=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=s(t,e),u=0;u<n.length;u++){var A=c(n[u]);0===a[A].references&&(a[A].updater(),a.splice(A,1))}n=i}}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),r=n(192),o={insert:"head",singleton:!1};e()(r.Z,o);r.Z.locals;const i={weather:"50b3870957c85703f8e198c195de51f6"},a=t=>Math.round(t-273.15),c=async t=>{const e=`https://source.unsplash.com/featured/?${t=encodeURI(t)},weather&fm=jpg`;await(async t=>{const e=`url('${t}')`;document.body.style.backgroundImage=e})(e)},s=t=>{const e=document.querySelector(".card");e.style.display="none",e.textContent="";const n=document.createElement("h1");n.setAttribute("id","city"),n.textContent=t.name;const r=document.createElement("p");r.setAttribute("id","temp"),r.textContent="Temperature: ";const o=document.createElement("span");o.setAttribute("id","temp-value"),o.textContent=a(t.main.temp);const i=document.createElement("span");i.setAttribute("id","unit"),i.textContent="C",r.append(o,i);const s=document.createElement("p");s.setAttribute("id","desc"),s.textContent=t.weather[0].main,c(t.weather[0].main);const u=document.createElement("img");u.setAttribute("id","icon"),u.src=`https://openweathermap.org/img/wn/${t.weather[0].icon}.png`;const A=document.createElement("button");A.textContent="Toggle unit (C/F)",A.setAttribute("id","toggle-btn"),e.append(n,r,s,u,A),e.style.display="flex",A.addEventListener("click",(()=>{var e;"C"===i.textContent?(o.textContent=(e=t.main.temp,Math.round(1.8*(e-273.15)+32)),i.textContent="F"):(o.textContent=a(t.main.temp),i.textContent="C")}))},u=async(t,e)=>{const n=`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=${e}`,r=await(async t=>(await fetch(t)).json())(n);s(r)},A=t=>t.length<1||null==t,d=document.querySelector("#city-btn"),l=document.querySelector("#city-field");d.addEventListener("click",(()=>{const t=l.value.trim();l.value="",A(t)||u(t,i.weather)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,