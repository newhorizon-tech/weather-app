(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>c});var r=e(15),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,"body {\n  margin: 0;\n  background-color: rgba(103, 58, 183, 1);\n}\n\n#input-section {\n  margin: 2%;\n}\n\nbutton {\n  color: white;\n  border: none;\n}\n\n#city-btn {\n  background-color: rgba(233, 6, 47, 1);\n  padding: 8px;\n  margin: 5px;\n}\n\n#toggle-btn {\n  padding: 3px;\n  color: black;\n}\n\ninput {\n  padding: 8px;\n}\n\n#icon {\n  width: 50px;\n  height: 50px;\n}\n\n.card {\n  display: none;\n  flex-direction: column;\n  align-items: center;\n  background: rgba(233, 6, 47, 1);\n  margin: 10% auto;\n  width: 250px;\n  height: 300px;\n  padding: 10px 15px;\n  color: white;\n  font-size: 100%;\n  line-height: 18px;\n  font-weight: bold;\n  box-sizing: border-box;\n  text-align: center;\n  transition: all 0.15s ease-out;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);\n  overflow: hidden;\n}\n\n#desc {\n  text-transform: capitalize;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,uCAAuC;AACzC;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,qCAAqC;EACrC,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,+BAA+B;EAC/B,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,iBAAiB;EACjB,sBAAsB;EACtB,kBAAkB;EAClB,8BAA8B;EAC9B,wCAAwC;EACxC,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;AAC5B",sourcesContent:["body {\n  margin: 0;\n  background-color: rgba(103, 58, 183, 1);\n}\n\n#input-section {\n  margin: 2%;\n}\n\nbutton {\n  color: white;\n  border: none;\n}\n\n#city-btn {\n  background-color: rgba(233, 6, 47, 1);\n  padding: 8px;\n  margin: 5px;\n}\n\n#toggle-btn {\n  padding: 3px;\n  color: black;\n}\n\ninput {\n  padding: 8px;\n}\n\n#icon {\n  width: 50px;\n  height: 50px;\n}\n\n.card {\n  display: none;\n  flex-direction: column;\n  align-items: center;\n  background: rgba(233, 6, 47, 1);\n  margin: 10% auto;\n  width: 250px;\n  height: 300px;\n  padding: 10px 15px;\n  color: white;\n  font-size: 100%;\n  line-height: 18px;\n  font-weight: bold;\n  box-sizing: border-box;\n  text-align: center;\n  transition: all 0.15s ease-out;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);\n  overflow: hidden;\n}\n\n#desc {\n  text-transform: capitalize;\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);r&&o[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(n)))return;var e=[],r=!0,o=!1,a=void 0;try{for(var i,c=n[Symbol.iterator]();!(r=(i=c.next()).done)&&(e.push(i.value),!t||e.length!==t);r=!0);}catch(n){o=!0,a=n}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return e}(n,t)||function(n,t){if(!n)return;if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);"Object"===r&&n.constructor&&(r=n.constructor.name);if("Map"===r||"Set"===r)return Array.from(n);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return e(n,t)}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e=t(n,4),r=e[1],o=e[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(i," */"),s=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[r].concat(s).concat([c]).join("\n")}return[r].join("\n")}},379:(n,t,e)=>{var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),i=[];function c(n){for(var t=-1,e=0;e<i.length;e++)if(i[e].identifier===n){t=e;break}return t}function s(n,t){for(var e={},r=[],o=0;o<n.length;o++){var a=n[o],s=t.base?a[0]+t.base:a[0],u=e[s]||0,d="".concat(s," ").concat(u);e[s]=u+1;var l=c(d),A={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(A)):i.push({identifier:d,updater:g(A,t),references:1}),r.push(d)}return r}function u(n){var t=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){t.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(t);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var d,l=(d=[],function(n,t){return d[n]=t,d.filter(Boolean).join("\n")});function A(n,t,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(t,o);else{var a=document.createTextNode(o),i=n.childNodes;i[t]&&n.removeChild(i[t]),i.length?n.insertBefore(a,i[t]):n.appendChild(a)}}function p(n,t,e){var r=e.css,o=e.media,a=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,m=0;function g(n,t){var e,r,o;if(t.singleton){var a=m++;e=f||(f=u(t)),r=A.bind(null,e,a,!1),o=A.bind(null,e,a,!0)}else e=u(t),r=p.bind(null,e,t),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var e=s(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<e.length;r++){var o=c(e[r]);i[o].references--}for(var a=s(n,t),u=0;u<e.length;u++){var d=c(e[u]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}e=a}}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),r=e(426),o={insert:"head",singleton:!1};t()(r.Z,o);r.Z.locals;const a={weather:"50b3870957c85703f8e198c195de51f6"},i=n=>Math.round(n-273.15),c=async n=>{const t=`https://source.unsplash.com/featured/?${n=encodeURI(n)},weather&fm=jpg`;await(async n=>{const t=`url('${n}')`;document.body.style.backgroundImage=t})(t)},s=n=>{const t=document.querySelector(".card");t.style.display="none",t.textContent="";const e=document.createElement("h1");e.setAttribute("id","city"),e.textContent=n.name;const r=document.createElement("p");r.setAttribute("id","temp"),r.textContent="Temperature: ";const o=document.createElement("span");o.setAttribute("id","temp-value"),o.textContent=i(n.main.temp);const a=document.createElement("span");a.setAttribute("id","unit"),a.textContent="C",r.append(o,a);const s=document.createElement("p");s.setAttribute("id","desc"),s.textContent=n.weather[0].main,c(n.weather[0].main);const u=document.createElement("img");u.setAttribute("id","icon"),u.src=`https://openweathermap.org/img/wn/${n.weather[0].icon}.png`;const d=document.createElement("button");d.textContent="Toggle unit (C/F)",d.setAttribute("id","toggle-btn"),t.append(e,r,s,u,d),t.style.display="flex",d.addEventListener("click",(()=>{var t;"C"===a.textContent?(o.textContent=(t=n.main.temp,Math.round(1.8*(t-273.15)+32)),a.textContent="F"):(o.textContent=i(n.main.temp),a.textContent="C")}))},u=async(n,t)=>{const e=`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=${t}`,r=await(async n=>(await fetch(n)).json())(e);s(r)},d=n=>n.length<1||null==n,l=document.querySelector("#city-btn"),A=document.querySelector("#city-field");l.addEventListener("click",(()=>{const n=A.value.trim();A.value="",d(n)||u(n,a.weather)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,